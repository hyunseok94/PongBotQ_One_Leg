cmake_minimum_required(VERSION 3.0.2)
project(elmo_pkgs)

LIST(APPEND CMAKE_MODULE_PATH
${PROJECT_SOURCE_DIR})

find_package(RBDL REQUIRED)
find_package(Eigen3 3.0.0 REQUIRED)

# appended to the catkin_variables(catkin_INCLUDE_DIRS contains the include paths for this lists)
find_package(catkin REQUIRED COMPONENTS 
 roscpp
 std_msgs
 soem
 message_generation
)



catkin_package(
  INCLUDE_DIRS include   # "include" folder 
#  LIBRARIES elmo_pkgs
#  CATKIN_DEPENDS other_catkin_pkg
#  DEPENDS system_lib
)

# *_INCLUDE_DIRS variables generated by find_package calls
## "include" indicates that the "include/" directory within the package is also part of the path
# include paths - where can header files be found for the code being built
# library paths - where are libraries located that executalbe target build against

include_directories(
 include
 ${catkin_INCLUDE_DIRS}
 ${RBDL_INCLUDE_DIR}
 ${EIGEN3_INCLUDE_DIR}
)


# Xenomai setting
execute_process(COMMAND /usr/xenomai/bin/xeno-config --skin=alchemy --cflags OUTPUT_VARIABLE XENO_CFLAGS)
execute_process(COMMAND /usr/xenomai/bin/xeno-config --skin=alchemy --ldflags OUTPUT_VARIABLE XENO_LDFLAGS)

SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -std=c++11 -lefence ${XENO_CFLAGS}")
string(STRIP ${CMAKE_CXX_FLAGS} CMAKE_CXX_FLAGS)
SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,--wrap=main -Wl,--no-as-needed -Wl,@/usr/xenomai/lib/modechk.wrappers -lalchemy -lcopperplate /usr/xenomai/lib/xenomai/bootstrap.o -Wl,--dynamic-list=/usr/xenomai/lib/dynlist.ld -L/usr/xenomai/lib -lcobalt -lmodechk -lpthread -lrt")
## Xenomai Setting end

# To Set executable file's location to ${PROJECT_SOURCE_DIR}/bin.
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/bin)

# To specify an executable target that must be buillt.
add_executable(elmo_pkgs.exe src/main.cpp src/servo.c src/ecat_dc.c src/CRobot.cpp)

# To specify which libraries an executable target links against.
target_link_libraries(elmo_pkgs.exe ${catkin_LIBRARIES} ${RBDL_LIBRARY} ${RBDL_URDFReader_LIBRARY})



